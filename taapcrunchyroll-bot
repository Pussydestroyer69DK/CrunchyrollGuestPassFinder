#!/bin/bash

if [ "$EUID" -eq 0 ];then 
    echo "WARNING: running this script as root is a security concern"
fi

pkgname='taapcrunchyroll-bot'

configDir="$HOME/.config/$pkgname"
configFile="$configDir/$pkgname.conf"
pythonScriptFolder="/usr/lib/$pkgname" 
if [ ! -e "$configDir" ]; then 
        mkdir -p "$configDir"
fi 
if [ ! -e "$configFile" ]; then 
        touch "$configFile"
fi 


cd "$configDir" || exit 2

if [[ "$1" == "-e" ]];then
    ${EDITOR:-nano} "$configFile"
    exit 0;
fi

function activateAccount(){
    uname=$1
    password=$2
    echo "Obtaining guest pass for $uname of Group $i";            
    python3 "$pythonScriptFolder/crunchyrollGuestPassFinder.py" "$uname" "$password" "$killTime"
    errorCode="$?"
    if [[ $errorCode -eq 0 ]]; then
        echo "Guest pass obtained; Updating user info" 
    elif [[ $errorCode -eq 1 ]]; then
        echo "Guest pass obtained; through unkown means" 
    else
        echo "exited with error code $errorCode"
    fi
    return $errorCode
}

exec > >(tee -i "$configDir/bot.log")
exec 2>&1
numberOfGroups=1

getCredentialsScript=
updateUserInfoScript=
killTime=36000 #10 hours

numberOfAttempts=2
source "$configFile"
if [[ -z $getCredentialsScript || -z $updateUserInfoScript ]]; then
    echo -n "Username:"; read username
    echo -n "Password:"; read -s password
    activateAccount "$username" "$password"
    exit
fi

echo "numberOfGroups '$numberOfGroups'"
echo "getCredentialsScript '$getCredentialsScript'"
echo "updateUserInfoScript '$updateUserInfoScript'"
echo "killTime '$killTime'"
echo "numberOfAttempts '$numberOfAttempts'"


function groupActivation(){
    groupNumber="$1"
    n="$numberOfAttempts"
    while [[ $numberOfAttempts -le 0 || $n -ne 0 ]]; do
        n=$n-1
        credentials=$($getCredentialsScript "$groupNumber")
        uname=$(echo "$credentials" |cut -d " " -f1)

        password=$(echo "$credentials" |cut -d " " -f2)
        groupPosition=$(echo "$credentials" |cut -d " " -f3)

        if [ "$credentials" != "0" ]; then
            activateAccount "$uname" "$password"
            errorCode=$?
            [ -z "$updateUserInfoScript" ] && $updateUserInfoScript $errorCode "$i" "$groupPosition"
            if [ "$errorCode" -eq 0 ]; then
                return 0
            elif [ "$errorCode" -eq 1 ]; then
                return 0
            fi
            
        else
            echo "Account '$uname' is still activated"

        fi
   done
}

for i in $(seq 1 $numberOfGroups);  do  
    groupActivation "$i"
done
